#!/bin/sh

#VC_cloudRun: Start a vc processing job in the cloud
#example: VC_cloudRun rbussell ~/data/compliance/kb_study/180707_PupAlz/PupAlz_119

sptMsg="$0:"

throwInputArgError() {
  echo ERROR: Bad or not enough input arguments. EXITING
  echo Try it like this: VC_cloudRun youruserid ~/your/study/directory
  exit
}

checkInputArgs() {
  if [ $# -lt 2 ]; then
    throwInputArgError()
    exit
  else
    userid=$1
    localRawDir=$2
    if [ "$#" -gt 2 ];then
      mode=$3
    fi
  fi
echo userid is $userid
echo datadir is $localRawDir
}

#Set default mode and check for input mode
#Only runcloud implemented for now.
#Add test later
mode=runcloud
remoteTgtDir="~/data/vcprocRemote/"
remoteScript="./VC_remoteScript"
procScript="~/bin/vc/VC_runProc.bash"

cfmribob="52.53.94.192"
descriptorFn=../descriptors/instanceIDs
remoteHost=$cfmribob

checkIntervalSec=2
nChecks=90

UP=1
DOWN=0

UNKNOWN=99
STOPPING=0
RUNNING=1
STOPPED=2
PENDING=3
SHUTTINGDOWN=4

readInstanceDescriptor() {
# get the instance ID
region=`cat $descriptorFn | grep "^vcprod " | awk '{print $3}'`
instanceID=`cat $descriptorFn | grep "^vcprod " | awk '{print $2}'`
echo found instance instanceID $instanceID in region $region
}

printInstanceStatus() {
aws ec2 describe-instances --instance-ids $instanceID --region $region --output text > /tmp/stat.$$
}

getInstanceState() {
printInstanceStatus
state=$UNKNOWN
grep STATE /tmp/stat.$$ | grep -q running  && state=$RUNNING
grep STATE /tmp/stat.$$ | grep -q stopped  && state=$STOPPED
grep STATE /tmp/stat.$$ | grep -q stopping && state=$STOPPING
grep STATE /tmp/stat.$$ | grep -q pending  && state=$PENDING
echo $state
}

cleanupAndExit() {
#rm -f /tmp/stat.$$
echo $sptMsg exiting
}

startInstance() {
aws ec2 start-instances --instance-ids $instanceID --region $region
}

stopInstance() {
aws ec2 stop-instances --instance-ids $instanceID --region $region
}

waitForNetwork() {
  echo checking for network.
  cnt=0
  netState=down
  drawBar $nChecks;echo
  while [ "$cnt" -lt "$nChecks" ];do
    echo -n .
    if checkRemoteSSH | grep -q down; then
      netSstate=down
      sleep $checkIntervalSec
    else
      cnt=$nChecks
    fi
    netState=up
    cnt=$(( $cnt+1 ))
  done

  #do one last check on network
  checkRemoteSSH | grep -q down && echo ERROR! Network check timed out without success.; exit
  checkRemoteSSH | grep -q up && echo returning from network check. Network is up
}

waitForInstanceToStart() {
echo waiting for instance to start.
cnt=0
drawBar $nChecks;echo
while [ "$cnt" -lt "$nChecks" ];do
echo -n .
sleep $checkIntervalSec
if [ `getInstanceState` -eq $RUNNING ];then
  cnt=$nChecks
  state=$RUNNING
  echo instance is now running. breaking out of starting hold.
fi
cnt=$(( $cnt+1 ))
done
}

drawBar() { 
nDots=$1
cnt=0
while [ "$cnt" -lt "$nDots" ];do
  echo -n .
  cnt=$(( $cnt+1 ))
done
echo -n "|"
}

waitForInstanceToStop() {
if [ `getInstanceState` -eq $STOPPED ];then
  echo instance is stopped
else
 echo waiting for instance to stop.
 drawBar $nChecks; echo
 cnt=0
 while [ "$cnt" -lt "$nChecks" ];do
 echo -n .
 sleep $checkIntervalSec
 if [ `getInstanceState` -eq $STOPPED ];then
   cnt=$nChecks
   echo instance is now stopped. breaking out of stopping hold.
   state=$STOPPED
 fi
 cnt=$(( $cnt+1 ))
 done
fi
}

closeSession() {
if [ `getInstanceState` -eq $RUNNING ];then
  stopInstance
  waitForInstanceToStop
fi
}

openSession() {
  if [ `getInstanceState` -eq $STOPPED ]; then
    waitForInstanceToStop
    startInstance
    waitForInstanceToStart
    waitForNetwork

    checkRemoteSSH | grep -q down && echo network is down. This could be a problem!
    checkRemoteSSH | grep -q up && echo network is up

  fi
}


sayHello() {
echo; echo
echo ------------------vc cloud launch-------------------------
echo This code for processing vascular compliance data.
echo Run it as follows: VC_cloudRun username studydir
echo
echo For example, if your user name on the processing server is \"seinfeld\" and
echo your data is in the directory called \"~/data/sarcasm_study\"
echo please launch the code with this command from a shell: 
echo
echo VC_cloudRun seinfeld ~/data/seinfeld_sarcasm_study
echo 
echo Data should be in a standard format as generated by vc preprocessing.
echo
echo For help or bug reports, contact: Robert Bussell, rbussell@ucsd.edu.
echo -----------------------------------------------------------
echo;echo
}

getSubDir() {
  id=`grep "^id " $localRawDir"/subject_info.txt" | awk '{print $2}'`
  dateStr=`grep "^date " $localRawDir"/subject_info.txt" | awk '{print $2}'`
  subDir=$id"_"$dateStr
  echo $subDir
}

transferData() {
subDir=`getSubDir`
echo $localRawDir/$subDir/VCFilesToTransfer.txt
remoteProcDir=$remoteTgtDir/`basename $localRawDir`_vccloud
rsyncCmd="rsync -avxP --files-from=$localRawDir/$subDir/VCFilesToTransfer.txt $localRawDir $userid@$remoteHost:$remoteProcDir"
echo $rsyncCmd
$rsyncCmd
}

checkRemoteSSH() {
sshState=$DOWN
nc -zv $cfmribob 22 2>&1 | grep -q succeeded && sshState=$UP 
if [ $sshState -eq $UP ]
then
  echo port 22 is up
fi
if [ $sshState -eq $DOWN ]
then
  echo port 22 is down
fi
}

startRemote() {
echo startRemote called
#ssh -X $userid@$remoteHost 'bash -s' < $remoteScript
M0=1;pp=1
launchCmd="/home/rbussell/bin/vc/VC_runProc.bash $remoteProcDir `basename $subDir` $subDir $M0 $pp remoteproc"
echo "#!/bin/bash" > /tmp/launchSpt
echo "$launchCmd" >> /tmp/launchSpt

#ssh -X $userid@$remoteHost "echo $launchCmd > $remoteProcDir/launchCmd; /bin/bash ./launchCmd"
#ssh -X $userid@$remoteHost 'cd $remoteProcDir; /bin/bash -s' < /tmp/launchSpt
ssh -X $userid@$remoteHost "cd $remoteProcDir; $launchCmd"
}

checkRequiredFiles() {
  `VC_checkRequiredFiles | grep -q "Not Found"` && echo ERROR: Some files not found. EXITING.;VC_checkRequiredFiles;exit
}
#--------MAIN---------
checkInputArgs "$@"

VC_checkRequiredFiles $localRawDir

sayHello

readInstanceDescriptor

openSession

transferData

startRemote

#closeSession

cleanupAndExit
