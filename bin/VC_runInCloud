#!/bin/sh

sptMsg="$0:"

echo $sptMsg called
descriptorFn=../descriptors/instanceIDs
remoteHost=cfmribob.ucsd.edu
remoteTgtDir="~/data/vcproc/"

checkIntervalSec=2
nChecks=90

UNKNOWN=99
STOPPING=0
RUNNING=1
STOPPED=2
PENDING=3
SHUTTINGDOWN=4

readInstanceDescriptor() {
# get the instance ID
region=`cat $descriptorFn | grep "^vcprod " | awk '{print $3}'`
instanceID=`cat $descriptorFn | grep "^vcprod " | awk '{print $2}'`
echo found instance instanceID $instanceID in region $region
}

printInstanceStatus() {
aws ec2 describe-instances --instance-ids $instanceID --region $region --output text > /tmp/stat.$$
}

getInstanceState() {
printInstanceStatus
state=$UNKNOWN
grep STATE /tmp/stat.$$ | grep -q running  && state=$RUNNING
grep STATE /tmp/stat.$$ | grep -q stopped  && state=$STOPPED
grep STATE /tmp/stat.$$ | grep -q stopping && state=$STOPPING
grep STATE /tmp/stat.$$ | grep -q pending  && state=$PENDING
echo $state
}

cleanupAndExit() {
#rm -f /tmp/stat.$$
echo $sptMsg exiting
}

startInstance() {
aws ec2 start-instances --instance-ids $instanceID --region $region
}

stopInstance() {
aws ec2 stop-instances --instance-ids $instanceID --region $region
}

waitForInstanceToStart() {
echo waiting for instance to start.
cnt=0
drawBar $nChecks;echo
while [ "$cnt" -lt "$nChecks" ];do
echo -n .
sleep $checkIntervalSec
if [ `getInstanceState` -eq $RUNNING ];then
  cnt=$nChecks
  state=$RUNNING
  echo instance is now running. breaking out of starting hold.
fi
cnt=$(( $cnt+1 ))
done
}

drawBar() { 
nDots=$1
cnt=0
while [ "$cnt" -lt "$nDots" ];do
  echo -n .
  cnt=$(( $cnt+1 ))
done
echo -n "|"
}

waitForInstanceToStop() {
echo waiting for instance to stop.
drawBar $nChecks; echo
cnt=0
while [ "$cnt" -lt "$nChecks" ];do
echo -n .
sleep $checkIntervalSec
if [ `getInstanceState` -eq $STOPPED ];then
  cnt=$nChecks
  echo instance is now stopped. breaking out of stopping hold.
  state=$STOPPED
fi
cnt=$(( $cnt+1 ))
done
}

closeSession() {
if [ `getInstanceState` -eq $RUNNING ];then
  stopInstance
  waitForInstanceToStop
fi
}

openSession() {
  if [ `getInstanceState` -eq $STOPPED ]; then
    startInstance
    waitForInstanceToStart
  fi
}

transferData() {
echo Data should be in a standard format in the directory you specify at the command line.
echo Contact: Robert Bussell, rbussell@ucsd.edu.
echo rsync -avxP vcproc $userid@$remoteHost:$remoteTgtDir
}

startRemote() {
}

#--------MAIN---------
readInstanceDescriptor

#openSession

transferData

#startRemote

#closeSession

cleanupAndExit
